
/**
 * Representation of hypotrochoid.
 * 
 * Hypotrochoid - roulette, descrbed like point on surface of satellite circle inside main circle.
 */
class Hypocycloid {

  /**
   * Returns value of x-axis of hypocycloid by angle, radius of center circle and radius of satellite circle.
   * @param {number} [angle] Angle of hypocycloid.
   * @param {number} [centerR] Radius of center circle.
   * @param {number} [satelliteR] Radius of satellite circle.
   * @returns Number
   * */
  static x(angle: number, centerR: number = 1, satelliteR: number = 1): number{
    let R = centerR - satelliteR;
    return R * Math.cos(angle) + satelliteR * Math.cos(R / satelliteR * angle)
  }


  /**
   * Returns value of y-axis of hypocycloid by angle, radius of center circle and radius of satellite circle.
   * @param {number} [angle] Angle of hypocycloid.
   * @param {number} [centerR] Radius of center circle.
   * @param {number} [satelliteR] Radius of satellite circle.
   * @returns Number
   * */
   static y(angle: number, centerR: number = 1, satelliteR: number = 1): number{
    let R = centerR - satelliteR;
    return R * Math.sin(angle) - satelliteR * Math.sin(R / satelliteR * angle)
  }




  /**
   * Returns matrix with points, generated by nex parameters.
   * @param [start] 
   * @param [centerR] 
   * @param [satelliteR] 
   * @param [length] 
   * @param [step] 
   * @returns [ [ x: number , y: number ] , ... ]
   * */
  static generate(start = 0, centerR=1,satelliteR=1,length=Math.TAU,step=Math.TAU * .001) :matrix {
    let matrix = []
    for(let i = start; i < start + length; i+=step){ matrix.push([ this.x(i , centerR , satelliteR) , this.y(i , centerR , satelliteR) ]) }
    return matrix
  }
}

export default Hypocycloid;